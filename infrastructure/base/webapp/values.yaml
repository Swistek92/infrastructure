# values.yaml
global:
  imagePullSecrets:
    - dockerhub-cred

# ---- wspólne: adres brokera Strimzi ----
# Dla połączeń PLAINTEXT:
kafka:
  bootstrap: "my-cluster-kafka-bootstrap.kafka.svc:9092"
# Jeśli używasz TLS, wtedy zwykle port 9093 i dodatkowe zmienne środowiskowe/certyfikaty:
# kafka:
#   bootstrap: "my-cluster-kafka-bootstrap.kafka.svc:9093"
#   tls: true
#   sasl:
#     enabled: false  # ustaw true, jeśli używasz SASL
#     mechanism: "SCRAM-SHA-512"
#     username: ""
#     passwordSecretName: ""     # nazwa Secretu z hasłem
#     passwordSecretKey: ""      # klucz w Secrecie

apiGateway:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/api-gateway
    tag: latest
    pullPolicy: Always
  env:
    NODE_ENV: "production"
    KAFKA_BROKER: "{{ .Values.kafka.bootstrap }}"
    # jeśli TLS/SASL, dodaj tu zmienne oczekiwane przez aplikację, np.:
    # KAFKA_TLS: "{{ .Values.kafka.tls | default false }}"
    # KAFKA_SASL_ENABLED: "{{ .Values.kafka.sasl.enabled | default false }}"
    # KAFKA_SASL_MECHANISM: "{{ .Values.kafka.sasl.mechanism | default \"SCRAM-SHA-512\" }}"
    # KAFKA_SASL_USERNAME: "{{ .Values.kafka.sasl.username }}"
    # KAFKA_SASL_PASSWORD_SECRET_NAME: "{{ .Values.kafka.sasl.passwordSecretName }}"
    # KAFKA_SASL_PASSWORD_SECRET_KEY: "{{ .Values.kafka.sasl.passwordSecretKey }}"
    PRODUCTS_GRPC_URL: "mywebapp-webapp-products:50051"
  service:
    type: ClusterIP
    port: 3000

notification:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/notification-microservice
    tag: latest
    pullPolicy: IfNotPresent
  env:
    NODE_ENV: "production"
    KAFKA_BROKER: "{{ .Values.kafka.bootstrap }}"
  service:
    type: ClusterIP
    port: 3000

order:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/order-microservice
    tag: latest
    pullPolicy: IfNotPresent
  env:
    NODE_ENV: "production"
    KAFKA_BROKER: "{{ .Values.kafka.bootstrap }}"
  service:
    type: ClusterIP
    port: 3000
  probes:
    enabled: true
    initialDelaySeconds: 10
    livenessInitialDelaySeconds: 30

payment:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/payment-microservice
    tag: latest
    pullPolicy: IfNotPresent
  env:
    NODE_ENV: "production"
    KAFKA_BROKER: "{{ .Values.kafka.bootstrap }}"
  service:
    type: ClusterIP
    port: 3000
  probes:
    enabled: true
    initialDelaySeconds: 10
    livenessInitialDelaySeconds: 30

products:
  replicas: 1
  containerPort: 50051
  image:
    repository: swistek/products-microservice
    tag: latest
    pullPolicy: Always
  env:
    NODE_ENV: "production"
  service:
    type: ClusterIP
    port: 50051
  probes:
    readiness:
      initialDelaySeconds: 5
      periodSeconds: 10
    liveness:
      initialDelaySeconds: 15
      periodSeconds: 20

# Te sekcje pozostają wyłączone – Kafka jest dostarczana przez Strimzi
kafkaBuiltin:
  enabled: false

zookeeper:
  enabled: false
