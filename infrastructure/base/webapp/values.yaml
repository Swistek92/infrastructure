global:
  imagePullSecrets:
    - name: dockerhub-cred
apiGateway:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/api-gateway
    tag: latest
    pullPolicy: Always
  env:
    NODE_ENV: "production"
    KAFKA_BROKER: "mywebapp-kafka:9092"             # Bitnami Kafka (KRaft)
    PRODUCTS_GRPC_URL: "mywebapp-webapp-products:50051"
  service:
    type: ClusterIP
    port: 3000

notification:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/notification-microservice
    tag: latest
    pullPolicy: IfNotPresent
  env:
    KAFKA_BROKER: "mywebapp-kafka:9092"
    NODE_ENV: "production"
  service:
    type: ClusterIP
    port: 3000

order:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/order-microservice
    tag: latest
    pullPolicy: IfNotPresent
  env:
    KAFKA_BROKER: "mywebapp-kafka:9092"
    NODE_ENV: "production"
  service:
    type: ClusterIP
    port: 3000
  probes:
    enabled: true
    initialDelaySeconds: 10
    livenessInitialDelaySeconds: 30

payment:
  replicas: 1
  containerPort: 3000
  image:
    repository: swistek/payment-microservice
    tag: latest
    pullPolicy: IfNotPresent
  env:
    KAFKA_BROKER: "mywebapp-kafka:9092"
    NODE_ENV: "production"
  service:
    type: ClusterIP
    port: 3000
  probes:
    enabled: true
    initialDelaySeconds: 10
    livenessInitialDelaySeconds: 30

products:
  replicas: 1
  containerPort: 50051
  image:
    repository: swistek/products-microservice
    tag: latest
    pullPolicy: Always
  env:
    NODE_ENV: "production"
  service:
    type: ClusterIP
    port: 50051
  probes:
    readiness:
      initialDelaySeconds: 5
      periodSeconds: 10
    liveness:
      initialDelaySeconds: 15
      periodSeconds: 20

# ===== Kafka Bitnami jako subchart (KRaft, bez Zookeepera) =====
kafka:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/kafka
    tag: latest         # sprawdzony, dostÄ™pny tag
  kraft:
    enabled: true
  controller:
    replicaCount: 1
    resources:
      requests: { cpu: 200m, memory: 512Mi }
      limits:   { cpu: 500m, memory: 1Gi }
  broker:
    replicaCount: 1
    resources:
      requests: { cpu: 200m, memory: 512Mi }
      limits:   { cpu: 500m, memory: 1Gi }
  persistence:
    enabled: false                    # lokalnie bez PVC (szybkie uruchomienie)
  service:
    type: ClusterIP

zookeeper:
  enabled: false                      # KRaft nie potrzebuje ZK
